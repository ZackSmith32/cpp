# include <ShrubberyCreationForm.hpp>
# include <Bureaucrat.hpp>
# include <Form.hpp>
# include <fstream>
# include <iostream>
# include <ostream>
# include <string>


ShrubberyCreationForm::ShrubberyCreationForm(std::string target) : 
			Form("ShrubberyCreationForm", 145, 137), _target(target){}

ShrubberyCreationForm::ShrubberyCreationForm(ShrubberyCreationForm & src) : 
			Form("ShrubberyCreationForm", src.getGradeToSign(), src.getGradeToExe()),
			_target(src.getTarget()) {
	*this = src;
}

ShrubberyCreationForm::~ShrubberyCreationForm() {};

ShrubberyCreationForm & ShrubberyCreationForm::operator=(ShrubberyCreationForm & src) {
	if (this != &src) {
		this->setSigned(src.getSigned());
		this->_target = src.getTarget();
	}
	return (*this);
}

void	ShrubberyCreationForm::trees() const {
	std::string fn;

	fn = _target + "_shrubbery";
	std::ofstream a_file(fn);
	a_file << "###########################'`################################\n" 
		"###########################  V##'############################\n"
		"#########################V'  `V  ############################\n"
		"########################V'      ,############################\n"
		"#########`#############V      ,A###########################V\n"
		"########' `###########V      ,###########################V',#\n"
		"######V'   ###########l      ,####################V~~~~'',###\n"
		"#####V'    ###########l      ##P' ###########V~~'   ,A#######\n"
		"#####l      d#########l      V'  ,#######V~'       A#########\n"
		"#####l      ##########l         ,####V''         ,###########\n"
		"#####l        `V######l        ,###V'   .....;A##############\n"
		"#####A,         `######A,     ,##V' ,A#######################\n"
		"#######A,        `######A,    #V'  A########'''''##########''\n"
		"##########,,,       `####A,           `#''           '''  ,,,\n"
		"#############A,                               ,,,     ,######\n"
		"######################oooo,                 ;####, ,#########\n"
		"##################P'                   A,   ;#####V##########\n"
		"#####P'    ''''       ,###             `#,     `V############\n"
		"##P'                ,d###;              ##,       `V#########\n"
		"##########A,,   #########A              )##,    ##A,..,ooA###\n"
		"#############A, Y#########A,            )####, ,#############\n"
		"###############A ############A,        ,###### ##############\n"
		"###############################       ,#######V##############\n"
		"###############################      ,#######################\n"
		"##############################P    ,d########################\n"
		"##############################'    d#########################\n"
		"##############################     ##########################\n"
		"##############################     ##########################\n"
		"#############################P     ##########################\n"
		"#############################'     ##########################\n"
		"############################P      ##########################\n"
		"###########################P'     ;##########################\n"
		"###########################'     ,###########################\n"
		"##########################       ############################\n"
		"#########################       ,############################\n"
		"########################        d###########P'    `Y#########\n"
		"#######################        ,############        #########\n"
		"######################        ,#############        #########\n"
		"#####################        ,##############b.    ,d#########\n"
		"####################        ,################################\n"
		"###################         #################################\n"
		"##################          #######################P'  `V##P'\n"
		"#######P'     `V#           ###################P'\n"
		"#####P'                    ,#################P'\n"
		"###P'                      d##############P''\n"
		"##P'                       V##############'\n"
		"#P'                         `V###########'\n"
		"#'                             `V##P'";
	a_file << std::endl;
}

std::string	ShrubberyCreationForm::getTarget() const {
	return (_target);
}

void 		ShrubberyCreationForm::execute(Bureaucrat const & executor) const {
	int grade = executor.getGrade();

	if (grade > this->getGradeToExe() || !getSigned()) {
		throw Form::GradeTooLowException();
	}
	else {
		std::cout << executor.getName() << " has executed " << getTarget() << std::endl;
		trees();
	}

}



















